{"version":3,"sources":["ChatMessage.js","MessageService.js","ChatInput.js","ChatApp.js","App.js","serviceWorker.js","index.js"],"names":["ChatMessage","props","messageItem","currentUser","message","user","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","databaseRef","ref","ChatInput","state","value","push","this","event","setState","target","sendMessage","type","id","onChange","e","handleChange","onClick","handleOnClick","Component","ChatApp","messages","getMessages","on","snapshot","val","Object","keys","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAmBeA,MAjBf,SAAqBC,GAAQ,IAErBC,EAEAD,EAFAC,YACAC,EACAF,EADAE,YAIAC,EAEAF,EAFAE,QACAC,EACAH,EADAG,KAGJ,OAEI,0BAAMC,UAAWH,IAAgBE,EAAO,0BAA4B,+BAAgCD,I,QCD5GG,gBAVuB,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAKX,IACaC,EADIR,aACmBS,IAAI,KCuBzBC,E,YApCX,WAAahB,GAAQ,IAAD,8BAChB,4CAAMA,KACDiB,MAAQ,CACTC,MAAO,IAHK,E,yEAQRhB,GACRY,EAAYK,KAAK,CACbf,KAAMF,EACNC,QAASiB,KAAKH,MAAMC,U,mCAKfG,GACTD,KAAKE,SAAS,CAACJ,MAAOG,EAAME,OAAOL,U,oCAIzBhB,GACVkB,KAAKI,YAAYtB,GACjBkB,KAAKE,SAAS,CAACJ,MAAO,O,+BAGf,IAAD,OACN,OACI,yBAAKb,UAAU,oBACX,2BAAOoB,KAAK,OAAOC,GAAG,YAAYR,MAAOE,KAAKH,MAAMC,MAAOS,SAAU,SAACC,GAAD,OAAO,EAAKC,aAAaD,MAC9F,4BAAQE,QAAS,kBAAM,EAAKC,cAAc,EAAK/B,MAAME,eAArD,e,GA/BQ8B,aCgCTC,E,YA7BX,WAAYjC,GAAQ,IAAD,8BACf,4CAAMA,KACDiB,MAAQ,CAETf,YAAa,QACbgC,SAAU,IAEd,EAAKC,cAPU,E,2EAWJ,IAAD,OACVrB,EAAYsB,GAAG,SAAS,SAAAC,GACpB,EAAKf,SAAS,CAAEY,SAAUG,EAASC,a,+BAIjC,IAAD,OACL,OACI,yBAAKjC,UAAU,WAEVkC,OAAOC,KAAKpB,KAAKH,MAAMiB,UAAUO,KAAI,SAAAxC,GAAW,OAAI,kBAAC,EAAD,CAAayC,IAAK,EAAKzB,MAAMiB,SAASjC,GAAaE,QAASF,YAAa,EAAKgB,MAAMiB,SAASjC,GAAcC,YAAa,EAAKe,MAAMf,iBACxL,kBAAC,EAAD,CAAWA,YAAakB,KAAKH,MAAMf,mB,GAvB7B8B,aCOPW,MARf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,QCKcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4742f9b0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ChatMessage(props) {\n    const {\n        messageItem,\n        currentUser\n    } = props;\n\n    const {\n        message,\n        user\n    } = messageItem;\n\n    return (\n        // The ternary here controls which messages appear to be sent by the current user\n        <span className={currentUser === user ? 'sentMessage chatMessage' : 'receivedMessage chatMessage'}>{message}</span>\n    );\n}\n\nexport default ChatMessage;\n","// This file initializes the Firebase database\n\nimport * as firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDGT3qQa-brMROyi0wxdaFPao2Yo9XmMGs\",\n    authDomain: \"guild-chat-app.firebaseapp.com\",\n    databaseURL: \"https://guild-chat-app.firebaseio.com\",\n    projectId: \"guild-chat-app\",\n    storageBucket: \"guild-chat-app.appspot.com\",\n    messagingSenderId: \"989822746315\",\n    appId: \"1:989822746315:web:d16c3ebb698c87f133254e\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst database = firebase.database();\nexport const databaseRef = database.ref(\"/\");\n","import React, {Component} from 'react';\nimport {databaseRef} from \"./MessageService\";\n\nclass ChatInput extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            value: ''\n        }\n    }\n\n    // Post message to database with user\n    sendMessage(currentUser) {\n        databaseRef.push({\n            user: currentUser,\n            message: this.state.value\n        })\n    }\n\n    // This handles the input text in a controlled way\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    // On click of the sutbmit button, post to database & clear input field\n    handleOnClick(currentUser) {\n        this.sendMessage(currentUser);\n        this.setState({value: ''});\n    }\n\n    render () {\n        return (\n            <div className=\"chatInputWrapper\">\n                <input type=\"text\" id=\"chatInput\" value={this.state.value} onChange={(e) => this.handleChange(e)} />\n                <button onClick={() => this.handleOnClick(this.props.currentUser)}>Submit</button>\n            </div>\n        );\n    }\n}\n\nexport default ChatInput;\n","import React, {Component} from 'react';\nimport ChatMessage from \"./ChatMessage\";\nimport ChatInput from \"./ChatInput\";\nimport {databaseRef} from \"./MessageService\";\n\nclass ChatApp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // Hardcoded user, this would be replaced with whatever user is authorized if an auth feature is added\n            currentUser: \"Jamie\",\n            messages: {}\n        };\n        this.getMessages();\n    }\n\n    // Getting messages from database\n    getMessages() {\n        databaseRef.on('value', snapshot => {\n            this.setState({ messages: snapshot.val() });\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"chatApp\">\n                {/*Mapping over messages, agnostic of user. The appearance of which user sent which message is controlled via styling*/}\n                {Object.keys(this.state.messages).map(messageItem => <ChatMessage key={this.state.messages[messageItem].message} messageItem={this.state.messages[messageItem]} currentUser={this.state.currentUser}/>)}\n                <ChatInput currentUser={this.state.currentUser}/>\n            </div>\n        );\n    }\n\n}\n\nexport default ChatApp;\n","import React from 'react';\nimport './App.scss';\nimport ChatApp from \"./ChatApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChatApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}